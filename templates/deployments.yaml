# Notify users about breaking change regarding packs, to not destroy current installations
{{- if and .Values.st2.packs.image }}
{{- fail "Value st2.packs.image was renamed to st2.packs.images and is now a list of images" }}
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2auth
  labels:
    app: st2auth
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2auth
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2auth
  # Multiple st2auth processes can be behind a load balancer in an active-active configuration.
  replicas: {{ default 2 .Values.st2auth.replicas }}
  template:
    metadata:
      labels:
        app: st2auth
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        checksum/auth: {{ include (print $.Template.BasePath "/secrets_st2auth.yaml") . | sha256sum }}
        {{- if .Values.st2auth.annotations }}
          {{- toYaml .Values.st2auth.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      # Sidecar container for generating .htpasswd with st2 username & password pair and sharing produced file with the main st2auth container
      - name: generate-htpasswd
        image: '{{ template "imageRepository" . }}/st2auth:{{ tpl (.Values.st2auth.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: ST2_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-st2-auth
              key: username
        - name: ST2_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-st2-auth
              key: password
        volumeMounts:
        - name: htpasswd-vol
          mountPath: /tmp/st2
        command:
          - 'sh'
          - '-ec'
          - printf "${ST2_AUTH_USERNAME}:$(openssl passwd -apr1 "${ST2_AUTH_PASSWORD}")\n" > /tmp/st2/htpasswd
      containers:
      - name: st2auth
        image: '{{ template "imageRepository" . }}/st2auth:{{ tpl (.Values.st2auth.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 9100
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        - name: htpasswd-vol
          mountPath: /etc/st2/htpasswd
          subPath: htpasswd
          readOnly: true
        {{- if .Values.st2auth.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2auth.resources | nindent 10 }}
    {{- if .Values.st2auth.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        - name: htpasswd-vol
          emptyDir:
            medium: Memory
        {{- if .Values.st2auth.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2auth-post-start-script
        {{- end }}
    {{- with .Values.st2auth.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2auth.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2auth.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2api
  labels:
    app: st2api
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2api
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2api
  # Multiple st2api process can be behind a load balancer in an active-active configuration.
  replicas: {{ default 2 .Values.st2api.replicas }}
  template:
    metadata:
      labels:
        app: st2api
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        checksum/datastore-key: {{ include (print $.Template.BasePath "/secrets_datastore_crypto_key.yaml") . | sha256sum }}
        {{- if .Values.st2api.annotations }}
          {{- toYaml .Values.st2api.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      {{- if .Values.st2.packs.images }}
        {{- include "packs-pullSecrets" . | nindent 6 }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      {{- if .Values.st2.packs.images }}
        {{- include "packs-initContainers" . | nindent 6 }}
      {{- end }}
      containers:
      - name: st2api
        image: '{{ template "imageRepository" . }}/st2api:{{ tpl (.Values.st2api.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 9101
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          mountPath: /etc/st2/keys
          readOnly: true
        {{- end }}
        {{- if .Values.st2.packs.images }}
        - name: st2-packs-vol
          mountPath: /opt/stackstorm/packs
          readOnly: true
        - name: st2-virtualenvs-vol
          mountPath: /opt/stackstorm/virtualenvs
          readOnly: true
        {{- end }}
        {{- if .Values.st2api.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2api.resources | nindent 10 }}
    {{- if .Values.st2api.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2.packs.images }}
{{- include "packs-volumes" . | indent 8 }}
        {{- end }}
        {{- if .Values.st2api.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2api-post-start-script
        {{- end }}
    {{- with .Values.st2api.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2api.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2api.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2stream
  labels:
    app: st2stream
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2stream
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2stream
  # Multiple st2stream process can be behind a load balancer in an active-active configuration.
  replicas: {{ default 2 .Values.st2stream.replicas }}
  template:
    metadata:
      labels:
        app: st2stream
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        {{- if .Values.st2stream.annotations }}
          {{- toYaml .Values.st2stream.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2stream
        image: '{{ template "imageRepository" . }}/st2stream:{{ tpl (.Values.st2stream.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 9102
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.st2stream.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2stream.resources | nindent 10 }}
    {{- if .Values.st2stream.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2stream.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2stream-post-start-script
        {{- end }}
    {{- with .Values.st2stream.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2stream.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2stream.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2web
  labels:
    app: st2web
    tier: frontend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2web
      release: {{ .Release.Name }}
  replicas: {{ default 2 .Values.st2web.replicas }}
  template:
    metadata:
      labels:
        app: st2web
        tier: frontend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2web.yaml") . | sha256sum }}
        {{- if .Values.st2web.annotations }}
          {{- toYaml .Values.st2web.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: st2web
        image: '{{ template "imageRepository" . }}/st2web:{{ tpl (.Values.st2web.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 80
        # Probe to check if app is running. Failure will lead to a pod restart.
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 80
          initialDelaySeconds: 1
        # Probe to check if app is ready to serve traffic. Failure will lead to temp stop serving traffic.
        # TODO: Failing to add readinessProbe, since st2 requires authorization (401) and we don't have `/healthz` endpoints yet (https://github.com/StackStorm/st2/issues/4020)
#        readinessProbe:
#          httpGet:
#            # Probes can't check several endpoints, - this should be implemented on app side (@see https://www.ianlewis.org/en/using-kubernetes-health-checks)
#            # Also multiple liveness checks are not available (@see https://github.com/kubernetes/kubernetes/issues/37218)
#            # So checking ST2_API only
#            scheme: HTTPS
#            path: /api/
#            port: 443
#          initialDelaySeconds: 3
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
            optional: true
    {{- if or .Values.st2web.config .Values.st2web.postStartScript }}
        volumeMounts:
    {{- else }}
        volumeMounts: []
    {{- end }}
        {{- if .Values.st2web.config }}
          - name: st2web-config-vol
            mountPath: /opt/stackstorm/static/webui/config.js
            subPath: st2web.config.js
        {{- end }}
        {{- if .Values.st2web.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2web.resources | nindent 10 }}
    {{- if .Values.st2web.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
    {{- if or .Values.st2web.config .Values.st2web.postStartScript }}
      volumes:
    {{- else }}
      volumes: []
    {{- end }}
        {{- if .Values.st2web.config }}
        - name: st2web-config-vol
          configMap:
            name: {{ .Release.Name }}-st2web-config
        {{- end }}
        {{- if .Values.st2web.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2web-post-start-script
        {{- end }}
    {{- with .Values.st2web.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2web.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2web.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2rulesengine
  labels:
    app: st2rulesengine
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2rulesengine
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2rulesengine
  # Multiple st2rulesengine processes can run in active-active with only connections to MongoDB and RabbitMQ. All these will share the TriggerInstance load and naturally pick up more work if one or more of the processes becomes unavailable.
  replicas: {{ default 2 .Values.st2rulesengine.replicas }}
  template:
    metadata:
      labels:
        app: st2rulesengine
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        {{- if .Values.st2rulesengine.annotations }}
          {{- toYaml .Values.st2rulesengine.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2rulesengine
        image: '{{ template "imageRepository" . }}/st2rulesengine:{{ tpl (.Values.st2rulesengine.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.st2rulesengine.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2rulesengine.resources | nindent 10 }}
    {{- if .Values.st2rulesengine.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        {{- if .Values.st2rulesengine.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2rulesengine-post-start-script
        {{- end }}
    {{- with .Values.st2rulesengine.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2rulesengine.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2rulesengine.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2timersengine
  labels:
    app: st2timersengine
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2timersengine
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2timersengine
  # Only single replica is created as timersengine can't work in active-active mode at the moment and it relies on
  # K8s failover/reschedule capabilities to address cases when the process fails.
  replicas: 1
  template:
    metadata:
      labels:
        app: st2timersengine
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        {{- if .Values.st2timersengine.annotations }}
          {{- toYaml .Values.st2timersengine.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2timersengine
        image: '{{ template "imageRepository" . }}/st2timersengine:{{ tpl (.Values.st2timersengine.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.st2timersengine.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2timersengine.resources | nindent 10 }}
    {{- if .Values.st2timersengine.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2timersengine.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2timersengine-post-start-script
        {{- end }}
    {{- with .Values.st2timersengine.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2timersengine.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2timersengine.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2workflowengine
  labels:
    app: st2workflowengine
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2workflowengine
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2workflowengine
  # Multiple st2workflowengine processes can run in active-active mode and will share the load and pick up more work if one or more of the processes become available.
  replicas: {{ default 2 .Values.st2workflowengine.replicas }}
  template:
    metadata:
      labels:
        app: st2workflowengine
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        checksum/datastore-key: {{ include (print $.Template.BasePath "/secrets_datastore_crypto_key.yaml") . | sha256sum }}
        {{- if .Values.st2workflowengine.annotations }}
          {{- toYaml .Values.st2workflowengine.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2workflowengine
        image: '{{ template "imageRepository" . }}/st2workflowengine:{{ tpl (.Values.st2workflowengine.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          mountPath: /etc/st2/keys
          readOnly: true
        {{- end }}
        {{- if .Values.st2workflowengine.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2workflowengine.resources | nindent 10 }}
    {{- if .Values.st2workflowengine.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        {{- if .Values.st2workflowengine.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2workflowengine-post-start-script
        {{- end }}
    {{- with .Values.st2workflowengine.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2workflowengine.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2workflowengine.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2scheduler
  labels:
    app: st2scheduler
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2scheduler
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2scheduler
  replicas: {{ default 2 .Values.st2scheduler.replicas }}
  template:
    metadata:
      labels:
        app: st2scheduler
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        checksum/datastore-key: {{ include (print $.Template.BasePath "/secrets_datastore_crypto_key.yaml") . | sha256sum }}
        {{- if .Values.st2scheduler.annotations }}
          {{- toYaml .Values.st2scheduler.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2scheduler
        image: '{{ template "imageRepository" . }}/st2scheduler:{{ tpl (.Values.st2scheduler.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          mountPath: /etc/st2/keys
          readOnly: true
        {{- end }}
        {{- if .Values.st2scheduler.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2scheduler.resources | nindent 10 }}
    {{- if .Values.st2scheduler.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2scheduler.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2scheduler-post-start-script
        {{- end }}
    {{- with .Values.st2scheduler.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2scheduler.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2scheduler.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2notifier
  labels:
    app: st2notifier
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2notifier
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2notifier
  # st2notifier runs in active-active mode and requires for that coordination backend like Redis or Zookeeper
  replicas: {{ default 2 .Values.st2notifier.replicas }}
  template:
    metadata:
      labels:
        app: st2notifier
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        {{- if .Values.st2notifier.annotations }}
          {{- toYaml .Values.st2notifier.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2notifier
        image: '{{ template "imageRepository" . }}/st2notifier:{{ tpl (.Values.st2notifier.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.st2notifier.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2notifier.resources | nindent 10 }}
    {{- if .Values.st2notifier.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2notifier.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2notifier-post-start-script
        {{- end }}
    {{- with .Values.st2notifier.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2notifier.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2notifier.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

{{- range .Values.st2.packs.sensors }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-st2sensorcontainer{{ template "hyphenPrefix" .name }}
  labels:
    app: st2sensorcontainer{{ template "hyphenPrefix" .name }}
    tier: backend
    vendor: stackstorm
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2sensorcontainer{{ template "hyphenPrefix" .name }}
      release: {{ $.Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2sensorcontainer
  # It is possible to run st2sensorcontainer in HA mode by running one process on each compute instance. Each sensor node needs to be
  # provided with proper partition information to share work with other sensor nodes so that the same sensor does not run on different nodes.
  # See Partitioning Sensors for information on how to partition sensors.
  replicas: 1
  template:
    metadata:
      labels:
        app: st2sensorcontainer{{ template "hyphenPrefix" .name }}
        tier: backend
        vendor: stackstorm
        chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
        release: {{ $.Release.Name }}
        heritage: {{ $.Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") $ | sha256sum }}
        checksum/packs: {{ include (print $.Template.BasePath "/configmaps_packs.yaml") $ | sha256sum }}
        checksum/datastore-key: {{ include (print $.Template.BasePath "/secrets_datastore_crypto_key.yaml") $ | sha256sum }}
        {{- if .annotations }}
          {{- toYaml .annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if $.Values.image.pullSecret }}
      - name: {{ $.Values.image.pullSecret }}
      {{- end }}
      {{- if $.Values.st2.packs.images }}
        {{- include "packs-pullSecrets" $ | nindent 6 }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" $ | nindent 6 }}
      {{- include "init-containers-wait-for-mq" $ | nindent 6 }}
      {{- if $.Values.st2.packs.images }}
        {{- include "packs-initContainers" $ | nindent 6 }}
      {{- end }}
      containers:
      - name: st2sensorcontainer{{ template "hyphenPrefix" .name }}
        image: '{{ template "imageRepository" $ }}/st2sensorcontainer:{{ tpl (.image.tag | default $.Values.image.tag) $ }}'
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        {{- with .readinessProbe }}
        # Probe to check if app is running. Failure will lead to a pod restart.
        readinessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .ref }}
        command:
          - /opt/stackstorm/st2/bin/st2sensorcontainer
          - --config-file=/etc/st2/st2.conf
          - --config-file=/etc/st2/st2.docker.conf
          - --config-file=/etc/st2/st2.user.conf
          - --single-sensor-mode
          - --sensor-ref={{ .ref }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ $.Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if $.Values.st2.packs.images }}
        - name: st2-packs-vol
          mountPath: /opt/stackstorm/packs
          readOnly: true
        - name: st2-virtualenvs-vol
          mountPath: /opt/stackstorm/virtualenvs
          readOnly: true
        {{- end }}
        {{- if $.Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          mountPath: /etc/st2/keys
          readOnly: true
        {{- end }}
        {{- if $.Values.st2sensorcontainer.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .resources | nindent 10 }}
    {{- if .serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" $ }}
    {{- end }}
      volumes:
        {{- if $.Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ $.Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        - name: st2-config-vol
          configMap:
            name: {{ $.Release.Name }}-st2-config
        {{- if $.Values.st2.packs.images }}
{{- include "packs-volumes" $ | indent 8 }}
        {{- end }}
        {{- if $.Values.st2sensorcontainer.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ $.Release.Name }}-st2sensorcontainer-post-start-script
        {{- end }}
    {{- with .nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2actionrunner
  labels:
    app: st2actionrunner
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2actionrunner
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2actionrunner
  # Multiple st2actionrunner processes can run in active-active with only connections to MongoDB and RabbitMQ. Work gets naturally
  # distributed across runners via RabbitMQ. Adding more st2actionrunner processes increases the ability of StackStorm to execute actions.
  replicas: {{ default 5 .Values.st2actionrunner.replicas }}
  template:
    metadata:
      labels:
        app: st2actionrunner
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        checksum/ssh: {{ include (print $.Template.BasePath "/secrets_ssh.yaml") . | sha256sum }}
        checksum/datastore-key: {{ include (print $.Template.BasePath "/secrets_datastore_crypto_key.yaml") . | sha256sum }}
        {{- if .Values.st2actionrunner.annotations }}
          {{- toYaml .Values.st2actionrunner.annotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.st2actionrunner.hostAliases }}
      hostAliases:
        {{- toYaml .Values.st2actionrunner.hostAliases | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      {{- if .Values.st2.packs.images }}
        {{- include "packs-pullSecrets" . | nindent 6 }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      {{- if .Values.st2.packs.images }}
        {{- include "packs-initContainers" . | nindent 6 }}
      {{- end }}
      containers:
      - name: st2actionrunner
        image: '{{ template "imageRepository" . }}/st2actionrunner:{{ tpl (.Values.st2actionrunner.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        - name: st2-ssh-key-vol
          mountPath: /home/stanley/.ssh-key-vol/
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          mountPath: /etc/st2/keys
          readOnly: true
        {{- end }}
        {{- if .Values.st2.packs.images }}
        - name: st2-packs-vol
          mountPath: /opt/stackstorm/packs
          readOnly: true
        - name: st2-virtualenvs-vol
          mountPath: /opt/stackstorm/virtualenvs
          readOnly: true
        {{- end }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        resources:
          {{- toYaml .Values.st2actionrunner.resources | nindent 10 }}
    {{- if .Values.st2actionrunner.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        - name: st2-ssh-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-ssh
            items:
            - key: private_key
              path: stanley_rsa
              # 0400 file permission
              mode: 256
        {{- if .Values.st2.packs.images }}
{{- include "packs-volumes" . | indent 8 }}
        {{- end }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2actionrunner-post-start-script
    {{- with .Values.st2actionrunner.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2actionrunner.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2actionrunner.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2garbagecollector
  labels:
    app: st2garbagecollector
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2garbagecollector
      release: {{ .Release.Name }}
  # https://docs.stackstorm.com/reference/ha.html#st2garbagecollector
  # Having 1 st2garbagecollector unique replica is enough for periodic task like st2 history garbage collection
  replicas: {{ default 1 .Values.st2garbagecollector.replicas }}
  template:
    metadata:
      labels:
        app: st2garbagecollector
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        {{- if .Values.st2garbagecollector.annotations }}
          {{- toYaml .Values.st2garbagecollector.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- include "init-containers-wait-for-db" . | nindent 6 }}
      {{- include "init-containers-wait-for-mq" . | nindent 6 }}
      containers:
      - name: st2garbagecollector
        image: '{{ template "imageRepository" . }}/st2garbagecollector:{{ tpl (.Values.st2garbagecollector.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # TODO: Add liveness/readiness probes (#3)
        #livenessProbe:
        #readinessProbe:
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.st2garbagecollector.postStartScript }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        {{- end }}
        resources:
          {{- toYaml .Values.st2garbagecollector.resources | nindent 10 }}
    {{- if .Values.st2garbagecollector.serviceAccount.attach }}
      serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
      volumes:
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2garbagecollector.postStartScript }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2garbagecollector-post-start-script
        {{- end }}
    {{- with .Values.st2garbagecollector.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2garbagecollector.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2garbagecollector.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2client
  labels:
    app: st2client
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2client
      release: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: st2client
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps_st2-conf.yaml") . | sha256sum }}
        checksum/rbac: {{ include (print $.Template.BasePath "/configmaps_rbac.yaml") . | sha256sum }}
        checksum/packs: {{ include (print $.Template.BasePath "/configmaps_packs.yaml") . | sha256sum }}
        checksum/auth: {{ include (print $.Template.BasePath "/secrets_st2auth.yaml") . | sha256sum }}
        checksum/ssh: {{ include (print $.Template.BasePath "/secrets_ssh.yaml") . | sha256sum }}
        checksum/datastore-key: {{ include (print $.Template.BasePath "/secrets_datastore_crypto_key.yaml") . | sha256sum }}
        {{- if .Values.st2client.annotations }}
          {{- toYaml .Values.st2client.annotations | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      {{- if .Values.st2.packs.images }}
        {{- include "packs-pullSecrets" . | nindent 6 }}
      {{- end }}
      {{- if .Values.image.pullSecret }}
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
      {{- if .Values.st2.packs.images }}
        {{- include "packs-initContainers" . | nindent 6 }}
      {{- end }}
      # Sidecar container for generating st2client config with st2 username & password pair and sharing produced file with the main container
      - name: generate-st2client-config
        image: '{{ template "imageRepository" . }}/st2actionrunner:{{ tpl (.Values.st2client.image.tag | default (.Values.st2actionrunner.image.tag | default .Values.image.tag)) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        env:
        - name: ST2_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-st2-auth
              key: username
        - name: ST2_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-st2-auth
              key: password
        volumeMounts:
        - name: st2client-config-vol
          mountPath: /root/.st2/
        # `st2 login` doesn't exit on failure correctly, use old methods instead. See bug: https://github.com/StackStorm/st2/issues/4338
        command:
          - 'sh'
          - '-ec'
          - |
            cat <<EOT > /root/.st2/config
            [credentials]
            username = ${ST2_AUTH_USERNAME}
            password = ${ST2_AUTH_PASSWORD}
            EOT
      containers:
      - name: st2client
        image: '{{ template "imageRepository" . }}/st2actionrunner:{{ tpl (.Values.st2client.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: ST2CLIENT
          value: "1"
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        volumeMounts:
        - name: st2-config-vol
          mountPath: /etc/st2/st2.docker.conf
          subPath: st2.docker.conf
        - name: st2-config-vol
          mountPath: /etc/st2/st2.user.conf
          subPath: st2.user.conf
        {{- if .Values.st2.rbac.enabled }}
        - name: st2-rbac-roles-vol
          mountPath: /opt/stackstorm/rbac/roles/
        - name: st2-rbac-assignments-vol
          mountPath: /opt/stackstorm/rbac/assignments/
        - name: st2-rbac-mappings-vol
          mountPath: /opt/stackstorm/rbac/mappings/
        {{- end }} 
        - name: st2-pack-configs-vol
          mountPath: /opt/stackstorm/configs/
        - name: st2client-config-vol
          mountPath: /root/.st2/
        - name: st2-ssh-key-vol
          mountPath: /home/stanley/.ssh-key-vol/
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          mountPath: /etc/st2/keys
          readOnly: true
        {{- end }}
        {{- if .Values.st2.packs.images }}
        - name: st2-packs-vol
          mountPath: /opt/stackstorm/packs
          readOnly: true
        - name: st2-virtualenvs-vol
          mountPath: /opt/stackstorm/virtualenvs
          readOnly: true
        {{- end }}
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        command:
          - 'bash'
          - '-ec'
          - 'while true; do sleep 999; done'
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        resources:
          requests:
            memory: "5Mi"
            cpu: "5m"
      volumes:
        {{- if .Values.secrets.st2.datastore_crypto_key }}
        - name: st2-encryption-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-datastore-crypto-key
            items:
            - key: datastore_crypto_key
              path: datastore_key.json
        {{- end }}
        - name: st2-config-vol
          configMap:
            name: {{ .Release.Name }}-st2-config
        {{- if .Values.st2.rbac.enabled }}
        - name: st2-rbac-roles-vol
          configMap:
            name: {{ .Release.Name }}-st2-rbac-roles
        - name: st2-rbac-assignments-vol
          configMap:
            name: {{ .Release.Name }}-st2-rbac-assignments
        - name: st2-rbac-mappings-vol
          configMap:
            name: {{ .Release.Name }}-st2-rbac-mappings
        {{- end }}
        - name: st2-pack-configs-vol
          configMap:
            name: {{ .Release.Name }}-st2-pack-configs
        - name: st2client-config-vol
          emptyDir:
            medium: Memory
        - name: st2-ssh-key-vol
          secret:
            secretName: {{ .Release.Name }}-st2-ssh
            items:
            - key: private_key
              path: stanley_rsa
              # 0400 file permission
              mode: 256
        {{- if .Values.st2.packs.images }}
{{- include "packs-volumes" . | indent 8 }}
        {{- end }}
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2client-post-start-script

{{ if .Values.st2chatops.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-st2chatops
  labels:
    app: st2chatops
    tier: backend
    vendor: stackstorm
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: st2chatops
      release: {{ .Release.Name }}
  # As hubot can't be HA scaled properly, we deploy only single replica of st2chatops
  replicas: 1
  template:
    metadata:
      labels:
        app: st2chatops
        tier: backend
        vendor: stackstorm
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        checksum/chatops: {{ include (print $.Template.BasePath "/secrets_st2chatops.yaml") . | sha256sum }}
        {{- if .Values.st2chatops.annotations }}
          {{- toYaml .Values.st2chatops.annotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: st2chatops
        image: '{{ .Values.st2chatops.image.repository | default "stackstorm" }}/{{ .Values.st2chatops.image.name | default "st2chatops" }}:{{ tpl (.Values.st2chatops.image.tag | default .Values.image.tag) . }}'
        imagePullPolicy: {{ .Values.st2chatops.image.pullPolicy | default .Values.image.pullPolicy }}
        {{- if not (hasKey .Values.st2chatops.env "ST2_API_KEY") }}
        env:
        - name: ST2_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-st2-auth
              key: username
        - name: ST2_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-st2-auth
              key: password
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-st2-urls
        - secretRef:
            name: {{ .Release.Name }}-st2chatops
        ports:
        - containerPort: 8081
        # TODO: Add to st2chatops Docker image https://github.com/joelwallis/hubot-health for a little bit more reliable HTTP health endpoint check
        readinessProbe:
          tcpSocket:
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 30
        {{- if .Values.st2chatops.postStartScript }}
        volumeMounts:
        - name: st2-post-start-script-vol
          mountPath: /post-start.sh
          subPath: post-start.sh
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash", "/post-start.sh"]
        volumes:
        - name: st2-post-start-script-vol
          configMap:
            name: {{ .Release.Name }}-st2chatops-post-start-script
        {{- end }}
        resources:
          {{- toYaml .Values.st2chatops.resources | nindent 10 }}
    {{- if .Values.st2chatops.serviceAccount.attach }}
        serviceAccountName: {{ template "stackstorm-ha.serviceAccountName" . }}
    {{- end }}
    {{- if .Values.st2chatops.hubotScriptsVolume }}
        volumeMounts:
        - name: st2-chatops-hubot-scripts-vol
          mountPath: /opt/stackstorm/chatops/scripts
      volumes:
        - name: st2-chatops-hubot-scripts-vol
          {{- toYaml .Values.st2chatops.hubotScriptsVolume | nindent 10 }}
    {{- end }}
    {{- with .Values.st2chatops.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2chatops.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.st2chatops.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
